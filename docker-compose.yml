version: '3.8'

# Development Docker Compose для DFDiscordAdminPanel
# Использование: docker-compose up -d

services:
  # MongoDB База данных
  mongo:
    image: mongo:6
    container_name: df-discord-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=discord-dashboard
    volumes:
      - mongo_data:/data/db
      - ./deployment/docker/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - discord-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API сервер
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: df-discord-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://admin:password123@mongo:27017/discord-dashboard?authSource=admin
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_CALLBACK_URL=${DISCORD_CALLBACK_URL:-http://localhost:5000/auth/discord/callback}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-your-super-secret-session-key-change-in-production}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - PORT=5000
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - discord-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Discord Bot
  bot:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: df-discord-bot
    restart: unless-stopped
    command: ["npm", "run", "bot"]
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://admin:password123@mongo:27017/discord-dashboard?authSource=admin
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-your-super-secret-session-key-change-in-production}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - discord-network

  # Frontend React приложение
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: df-discord-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5000}
      - REACT_APP_DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - discord-network
    stdin_open: true
    tty: true

# Volumes для постоянного хранения данных
volumes:
  mongo_data:
    driver: local
    name: df-discord-mongo-data

# Сеть для связи между контейнерами
networks:
  discord-network:
    driver: bridge
    name: df-discord-network